BlueTwine=function(serviceUUID,TxUUID,RxUUID){this.Nordic_Serial_UUID="6e400001-b5a3-f393-e0a9-e50e24dcca9e";this.Nordic_TX_Char_UUID="6e400002-b5a3-f393-e0a9-e50e24dcca9e";this.Nordic_RX_Char_UUID="6e400003-b5a3-f393-e0a9-e50e24dcca9e";this.serviceUUID=this.Nordic_Serial_UUID;this.charTxUUID=this.Nordic_TX_Char_UUID;this.charRxUUID=this.Nordic_RX_Char_UUID;this.device=null;this.service=null;this.charTxService=null;this.charRxService=null;this.RxmaxFrameBytes=128e3;this.RxFrameBytesBuf=[];this.TxMaxFrameBytes=20;this.stats={};this.onDataChunk=null;this.onStringChunk=null;this.onDataFrame=null;this.onStringFrame=null;this.onJSON=null;this.serialFrSSeq="";this.serialFrESeq="\n";this.serialFrEscSeq="\\";this.ab2str=function(buf){return String.fromCharCode.apply(null,new Uint8Array(buf))};this.str2ab=function(str){var buf=new ArrayBuffer(str.length);var bufView=new Uint8Array(buf);for(var i=0,strLen=str.length;i<strLen;i++)bufView[i]=str.charCodeAt(i);return buf};this.ab2array=function(buf){var bufView=new Uint8Array(buf);var z=new Array(bufView.Length);bufView.map(function(x,i){z[i]=x});return z};this.arrayu82ab=function(arr){var buf=new ArrayBuffer(arr.length);var bufView=new Uint8Array(buf);arr.map(function(x,i){bufView[i]=x});return buf};this.arrEq=function(a,b){if(a.length!=b.length)return false;for(i=0;i<a.length;i++)if(a[i]!=b[i])return false;return true};this.statsCopy=function(){return JSON.parse(JSON.stringify(this.stats))};this.statsReset=function(){this.stats={}};this.statsEnable=function(enable){_statsInc=enable?this.statsInc:function(){}};this.statsInc=function(key,val,set){if(set==true)this.stats[key]=val;else this.stats[key]=key in this.stats?this.stats[key]+val:val};var _statsInc=this.statsInc;this.statsClr=function(key){if(this.typeOf(key)=="array")key.forEach(function(k){this.stats[k]=0});else this.stats[key]=0};this.isValidUUID=function(uuid){if(!Number.isInteger(uuid)&&!(typeof uuid==="string"||uuid instanceof String))return false;if(!uuid)return false;return true};this.setUUIDs=function(serviceUUID,charTxUUID,charRxUUID){this.serviceUUID=this.isValidUUID(serviceUUID)?serviceUUID:this.serviceUUID;this.charTxUUID=this.isValidUUID(serviceUUID)?charTxUUID:this.charTxUUID;this.charRxUUID=this.isValidUUID(serviceUUID)?charRxUUID:this.charRxUUID;return{service:this.serviceUuid,charTxUUID:this.charTxUUID,charRxUUID:this.charRxUUID}};this.setUUIDs(serviceUUID,TxUUID,RxUUID);this.connectToDevice=async function(){try{this.log("Attemtping to connecting to device id: "+this.serviceUUID);let servicesList=this.typeOf(this.serviceUUID)=="array"?this.serviceUUID:[this.serviceUUID];let options={filters:[{services:servicesList}]};this.device=await navigator.bluetooth.requestDevice(options);this.statsInc("connect_start_timestamp",(new Date).getTime(),true);this.log("Connected to device id: "+this.serviceUUID);this.log("Device name: "+this.device.name);await this.device.addEventListener("gattserverdisconnected",this.onDisconnected);this.log("Connecting to gatt server.. ");this.gatt=await this.device.gatt.connect();this.log("Getting Primary Service (serial)");this.service=await this.gatt.getPrimaryService(this.serviceUUID);this.log("Getting Tx Characteristic ");this.charTxService=await this.service.getCharacteristic(this.charTxUUID);this.log("Getting Rx Characteristic ");this.charRxService=await this.service.getCharacteristic(this.charRxUUID);await this.charRxService.startNotifications();this.log("Notifications started");this.charRxService.addEventListener("characteristicvaluechanged",this.handleRXNotify)}catch(e){this.log("Error in request / connect : "+e)}};this.readSerialData=async function(){try{return await this.charRxService.readValue()}catch(e){this.log("CharRxService service error: "+e)}};this.writeRawDataChunk=async function(data){try{await this.charTxService.writeValue(data);_statsInc("tx_bytes",data.byteLength)}catch(e){this.log("CharTX Service error: "+e)}};this.writeRawBuf=async function(data){try{let i=0,e;while(i<data.byteLength){e=i+this.TxMaxFrameBytes;e=e<data.byteLength?e:data.byteLength;await this.writeRawDataChunk(data.slice(i,e));i+=this.TxMaxFrameBytes;_statsInc("tx_frames")}}catch(e){_statsInc("tx_fail");this.log("Char write raw frames: "+e)}};this.writeString=async function(str){await this.writeRawBuf(this.str2ab(str));_statsInc("tx_strings");_statsInc("tx_strings_bytes",str.length)};this.writeJSON=async function(x){try{await this.writeString(JSON.stringify(x));_statsInc("tx_json_objects")}catch(e){_statsInc("tx_json_err")}};this.startRxCallback=async function(listener){await this.charRxService.startNotifications();this.onRawData=typeof listener=="function"?listener:this.onRawData;this.charRxService.addEventListener("characteristicvaluechanged",this.handleRXNotify);this.log("Rx callback set")};this.stopRxCallback=async function(){this.charRxService.removeEventListener("characteristicvaluechanged",this.handleRXNotify);this.log("Rx callback removed")};this.handleRXNotify=function(event){let value=event.target.value;_statsInc("rx_frames");_statsInc("rx_bytes",value.byteLength);if(this.onDataChunk){this.onDataChunk(value)}if(this.onStringChunk){const strvalue=(new TextDecoder).decode(event.target.value);if(this.onStringChunk(strvalue))this.onStringChunk(strvalue)}if(this.onDataFrame||this.onStringFrame||this.onJSON){}};this.disconnect=function(){if(!this.device){this.log("device is already disonnected");return Promise.reject("Device is already connected.")}return this.device.gatt.disconnect()};this.onDisconnected=function(){this.statsInc("connect_stop_timestmap",(new Date).getTime(),true);this.log("Device is disconnected.")};this.isWebBluetoothAvailable=function(){if(navigator.bluetooth){return true}else{this.log("Web Bluetooth API is not available. check connection is https or localhost or check browser compatibility.");return false}};this.byteEncPPP=function(x){let v=new Uint8Array(x),r=[];for(let i=0;i<v.length;i++){if(v[i]==126||v[i]==125){r.push(126);r.push(v[i]^32)}else{r.push(v[i])}}return this.arrayu82ab(r)};this.byteDecPPP=function(x){let v=new Uint8Array(x),r=[];for(let i=0;i<v.length;i++){if(v[i]==126||v[i]==125){i++;r.push(v[i]^32)}else{r.push(v[i])}}return this.arrayu82ab(r)};this.typeOf=function(x,baseTypeOnly){if(x===null)return"null";var y=typeof x=="undefined"?"undefined":{}.toString.call(x).match(/\s([a-zA-Z]+)/)[1].toLocaleLowerCase();if(y!="object"&&y!="function")return y;if(baseTypeOnly==true)return y;var r=y;try{r=x.constructor.name.toLocaleLowerCase()==y.toLocaleLowerCase()?y:x.constructor.name}catch(e){}return r};this.isType=function(x,types){types=this.typeOf(types)=="array"?types:[types];return types.indexOf(this.typeOf(x))>=0};this.version=function(){var v={version:"1.0.2",about:"BlueTwine is a library for wrapping web bluetooth.",copy:"(c) M A Chatterjee deftio (at) deftio (dot) com",url:"http://github.com/deftio/BlueTwine",license:"BSD-2-Clause"};return v};this.handleRXNotify=this.handleRXNotify.bind(this);this.onDisconnected=this.onDisconnected.bind(this);this.statsInc=this.statsInc.bind(this);_statsInc=_statsInc.bind(this);this.typeOf=this.typeOf.bind(this);this.isType=this.isType.bind(this);this.byteDecPPP=this.byteDecPPP.bind(this);this.byteEncPPP=this.byteEncPPP.bind(this);return this};if(typeof module!="undefined"){module["exports"]=BlueTwine}